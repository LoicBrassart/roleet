x-baseService: &baseService
  restart: always
  healthcheck:
    interval: 300s
    timeout: 30s
    retries: 5
    start_period: 30s
    start_interval: 5s

services:
  gateway-dev:
    <<: *baseService
    container_name: gateway-dev
    image: nginx
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf
    ports:
      - ${GATEWAY_PORT}:80
    depends_on:
      backend-dev:
        condition: service_healthy
      files-dev:
        condition: service_healthy
      frontend-dev:
        condition: service_healthy
      adminer-dev:
        condition: service_started
      realtime-dev:
        condition: service_healthy

  db-dev:
    <<: *baseService
    container_name: db-dev
    image: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${DB_DATABASE} -U ${DB_USER}"]
    volumes:
      - ./persist/db-dev:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_HOST: ${DB_HOST}

  adminer-dev:
    <<: *baseService
    container_name: adminer-dev
    image: adminer
    depends_on:
      db-dev:
        condition: service_healthy

  backend-dev:
    <<: *baseService
    container_name: backend-dev
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'curl --fail --request POST --header ''Content-Type: application/json'' --url ''http://backend-dev:4000'' --data ''{"query":"query { __typename }"}'' || exit 1',
        ]
    depends_on:
      db-dev:
        condition: service_healthy
      rabbit-dev:
        condition: service_healthy

    volumes:
      - ./backend/src:/app/src/
      - ./persist/backend-dev:/app/static
    environment:
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      DB_USER: ${DB_USER}
      DB_HOST: ${DB_HOST}
      JWT_SECRET: ${JWT_SECRET}
      COOKIE_TTL: ${COOKIE_TTL}

  files-dev:
    <<: *baseService
    container_name: files-dev
    build:
      context: ./files
      dockerfile: Dockerfile.dev
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail --request GET --url 'http://files-dev:4000/health'|| exit 1",
        ]
    volumes:
      - ./files/src:/app/src/
      - ./persist/files-dev:/app/public

  realtime-dev:
    <<: *baseService
    container_name: realtime-dev
    build:
      context: ./realtime
      dockerfile: Dockerfile.dev
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail --request GET --url 'http://realtime-dev:4000/health'|| exit 1",
        ]
    volumes:
      - ./realtime/src:/app/src/
    environment:
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      rabbit-dev:
        condition: service_healthy

  frontend-dev:
    <<: *baseService
    container_name: frontend-dev
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --fail --request GET --url 'http://frontend-dev:5173' || exit 1",
        ]
    depends_on:
      codegen-dev:
        condition: service_completed_successfully
    volumes:
      - ./frontend/src:/app/src/
    environment:
      VITE_API_URL: ${VITE_API_URL}
      VITE_WS_URL: ${VITE_WS_URL}

  codegen-dev:
    <<: *baseService
    container_name: codegen-dev
    restart: on-failure
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    depends_on:
      backend-dev:
        condition: service_healthy
    volumes:
      - ./frontend/src:/app/src/
    command: ["npm", "run", "codegen"]
    environment:
      VITE_API_URL: http://backend-dev:4000

  rabbit-dev:
    container_name: rabbit-dev
    <<: *baseService
    image: rabbitmq
    volumes:
      - ./persist/rabbitmq/data/:/var/lib/rabbitmq/
      - ./persist/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping || exit 1"]
    ports:
      - 5672:5672
      - 15672:15672
    command: >
      sh -c "
      rabbitmq-plugins enable rabbitmq_management &&
      rabbitmq-server"
